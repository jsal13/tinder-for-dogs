---
AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  # TODO: Make another one which is private for DB..
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true

  # Networking resources for public subnets.
  # Public IPs; the routing table sends traffic
  # via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1

  # TODO: NAT gateway stuff yet for private endpoints.

  # TODO: Maybe use ECS resources here, depending on how much we use Lambdas and stuff.

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "DogTinder"
      GroupDescription: "22, 80, 5000, 8080 in, All Traffic Out"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIP: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIP: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "5000"
          ToPort: "5000"
          CidrIP: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "8080"
          ToPort: "8080"
          CidrIP: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
    # Spin up DB.
    # Spin up S3?
    # Spin up CloudFront and configure.
    # Spin up Lambdas.

    # https://aws.amazon.com/blogs/infrastructure-and-automation/deploying-aws-lambda-functions-using-aws-cloudformation-the-portable-way/
    DogBucket:
      Type: AWS::S3::Bucket

arn:aws:iam::626034116433:user/Lambda-Execution