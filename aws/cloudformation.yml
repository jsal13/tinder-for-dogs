---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ApiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "call"

  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "my-function"

  # Resources:
  #   VPC:
  #     Type: AWS::EC2::VPC
  #     Properties:
  #       CidrBlock: "10.0.0.0/16"
  #       EnableDnsSupport: true
  #       EnableDnsHostnames: true
  #       InstanceTenancy: default

  #   # TODO: Make another one which is private for DB..
  #   Subnet1:
  #     Type: AWS::EC2::Subnet
  #     Properties:
  #       AvailabilityZone: !Select [0, !GetAZs ]
  #       VpcId: !Ref VPC
  #       CidrBlock: "10.0.1.0/24"
  #       MapPublicIpOnLaunch: true

  #   # Networking resources for public subnets.
  #   # Public IPs; the routing table sends traffic
  #   # via the internet gateway.
  #   InternetGateway:
  #     Type: AWS::EC2::InternetGateway
  #     DependsOn: VPC
  #   GatewayAttachment:
  #     Type: AWS::EC2::VPCGatewayAttachment
  #     Properties:
  #       VpcId: !Ref VPC
  #       InternetGatewayId: !Ref InternetGateway
  #   PublicRouteTable:
  #     Type: AWS::EC2::RouteTable
  #     Properties:
  #       VpcId: !Ref VPC
  #   PublicRoute:
  #     Type: AWS::EC2::Route
  #     DependsOn: GatewayAttachment
  #     Properties:
  #       DestinationCidrBlock: "0.0.0.0/0"
  #       GatewayId: !Ref InternetGateway
  #       RouteTableId: !Ref PublicRouteTable
  #   Subnet1RouteTableAssociation:
  #     Type: AWS::EC2::SubnetRouteTableAssociation
  #     Properties:
  #       RouteTableId: !Ref PublicRouteTable
  #       SubnetId: !Ref Subnet1

  #   SecurityGroup:
  #     Type: AWS::EC2::SecurityGroup
  #     Properties:
  #       GroupName: "DogTinder"
  #       GroupDescription: "22, 80, 5000, 8080 in, All Traffic Out"
  #       VpcId: !Ref VPC
  #       SecurityGroupIngress:
  #         - IpProtocol: tcp
  #           FromPort: "22"
  #           ToPort: "22"
  #           CidrIP: 0.0.0.0/0
  #         - IpProtocol: tcp
  #           FromPort: "80"
  #           ToPort: "80"
  #           CidrIP: 0.0.0.0/0
  #         - IpProtocol: tcp
  #           FromPort: "5000"
  #           ToPort: "5000"
  #           CidrIP: 0.0.0.0/0
  #         - IpProtocol: tcp
  #           FromPort: "8080"
  #           ToPort: "8080"
  #           CidrIP: 0.0.0.0/0

  #       SecurityGroupEgress:
  #         - IpProtocol: -1
  #           CidrIp: 0.0.0.0/0

  #     # Spin up DB.
  #     # Spin up S3?
  #     # Spin up CloudFront and configure.
  #     # Spin up Lambdas.

  #     # https://aws.amazon.com/blogs/infrastructure-and-automation/deploying-aws-lambda-functions-using-aws-cloudformation-the-portable-way/
  #     DogBucket:
  #       Type: AWS::S3::Bucket
  #   #arn:aws:iam::626034116433:user/Lambda-Execution

  ApiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !GetAtt "LambdaFunction.Arn"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "ApiGateway"
      StageName: !Ref "ApiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref "LambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10

  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "Lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/"

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "Lambda"

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"

  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
